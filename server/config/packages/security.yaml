security:
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
      algorithm: auto
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_user_provider
      custom_authenticator: App\Security\JwtAuthenticator
    login:
      pattern: ^/api/login
      stateless: true
      provider: app_user_provider
      json_login:
        check_path: /api/login
        username_path: username
        password_path: password
    api:
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      jwt: ~

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/createUser, roles: PUBLIC_ACCESS }
    - { path: ^/api/checkAuth, roles: PUBLIC_ACCESS }
    - { path: ^/api/getRooms, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/createRoom, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/createMessage, roles: PUBLIC_ACCESS }
    - { path: ^/api/joinRoom, roles: PUBLIC_ACCESS }
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
  security:
    enable_authenticator_manager: true
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
